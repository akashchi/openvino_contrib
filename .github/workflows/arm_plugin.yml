name: ARM plugin
on:
  workflow_dispatch:
  pull_request:
    branches:
      - 'releases/**'
      - 'master'
    paths:
      - 'modules/arm_plugin/**'
  push:
    branches:
      - 'master'
      - 'github-actions'

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: false

jobs:
  Build:
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: ['macos-arm64']
        # os: ['macos-arm64', 'windows-latest-8-cores', 'ubuntu-20.04-16-cores']
    runs-on: ['self-hosted', 'macOS']
    env:
      BUILD_TYPE: Release
      CCACHE_DIR: /Users/sandye51/actions-runner/build_cache
      CCACHE_MAXSIZE: 10G
      CMAKE_OSX_DEPLOYMENT_TARGET: 11.0
      OPENVINO_REPO: "${{ github.workspace }}/openvino"
      OPENVINO_CONTRIB_REPO: "${{ github.workspace }}/openvino_contrib"
      INSTALL_DIR: "${{ github.workspace }}/install"
      INSTALL_TEST_DIR: "${{ github.workspace }}/install/tests"
      SAMPLES_INSTALL_DIR: "${{ github.workspace }}/install/samples"
      BUILD_DIR: "${{ github.workspace }}/build"
      OPENVINO_REFERENCE: /Users/sandye51/actions-runner/openvino.reference/
      OPENVINO_CONTRIB_REFERENCE: /Users/sandye51/actions-runner/openvino_contrib.reference/
      SUBMODULES_REFERENCE: /Users/sandye51/actions-runner/submodules.reference
      OV_TEMP: /Users/sandye51/actions-runner/openvino_temp

    steps:
      - name: Clone OpenVINO with cache
        if: runner.os == 'macOS'
        run: |
          rm -fr openvino
          git clone --reference "$OPENVINO_REFERENCE" https://github.com/openvinotoolkit/openvino.git
          cd "$OPENVINO_REPO" && git submodule update --init --reference "$SUBMODULES_REFERENCE" --jobs 4

      - name: Clone OpenVINO Contrib with cache
        if: runner.os == 'macOS'
        run: |
          rm -fr openvino_contrib
          git clone --reference "$OPENVINO_CONTRIB_REFERENCE" https://github.com/openvinotoolkit/openvino_contrib.git
          cd "$OPENVINO_CONTRIB_REPO" && git submodule update --init --reference "$SUBMODULES_REFERENCE"

      - name: Clone OpenVINO & OpenVINO Contrib
        if: runner.os != 'macOS'
        run: |
          git clone https://github.com/openvinotoolkit/openvino.git
          cd "$OPENVINO_REPO" && git submodule update --init
          git clone https://github.com/openvinotoolkit/openvino_contrib.git
          cd "$OPENVINO_CONTRIB_REPO" && git submodule update --init

      #
      # Dependencies
      #

      - uses: actions/setup-python@v4
        if: runner.os != 'macOS'
        id: cp310
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            openvino/src/bindings/python/wheel/requirements-dev.txt
            openvino/src/bindings/python/requirements.txt
            openvino/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
            # openvino/src/frontends/paddle/tests/requirements.txt
            openvino/src/frontends/onnx/tests/requirements.txt
            openvino/src/frontends/tensorflow/tests/requirements.txt

      - name: Install python dependencies
        run: |
          # For Python API
          python3 -m pip install --upgrade pip
          python3 -m pip install -r "$OPENVINO_REPO/src/bindings/python/wheel/requirements-dev.txt"
          python3 -m pip install -r "$OPENVINO_REPO/src/bindings/python/requirements.txt"
          # For running Python API tests
          python3 -m pip install -r "$OPENVINO_REPO/src/bindings/python/src/compatibility/openvino/requirements-dev.txt"
          # For running ONNX frontend unit tests
          python3 -m pip install -r "$OPENVINO_REPO/src/frontends/onnx/tests/requirements.txt"
          # For running TensorFlow frontend unit tests
          # python3 -m pip install -r "$OPENVINO_REPO/src/frontends/tensorflow/tests/requirements.txt"
          # For running Paddle frontend unit tests
          # python3 -m pip install -r "$OPENVINO_REPO/src/frontends/paddle/tests/requirements.txt"

      - name: Install MO dependencies
        run: |
          python3 -m pip install -r "$OPENVINO_REPO/tools/mo/requirements_caffe.txt"
          python3 -m pip install -r "$OPENVINO_REPO/tools/mo/requirements_kaldi.txt"
          python3 -m pip install -r "$OPENVINO_REPO/tools/mo/requirements_onnx.txt"
          python3 -m pip install -r "$OPENVINO_REPO/tools/mo/requirements_dev.txt"
          # python3 -m pip install -r "$OPENVINO_REPO/tools/mo/requirements_mxnet.txt"
          # python3 -m pip install -r "$OPENVINO_REPO/tools/mo/requirements_tf2.txt"

      - name: Install build dependencies
        if: runner.os == 'Linux'
        run: sudo "$OPENVINO_REPO/install_build_dependencies.sh"

      #
      # Build
      #

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores

      - name: CMake configure
        id: cmake-configure
        run: |
          echo "::group::Define cmake arguments"
          if [[ "$RUNNER_OS" == "macOS" ]] ; then
            cmake_args=(-DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.CMAKE_OSX_DEPLOYMENT_TARGET }})
            cmake_args+=(-DARM_COMPUTE_SCONS_JOBS=4)
          fi
          echo "::endgroup::"

          echo "::group::CMake configure"
          cmake "${cmake_args[@]}" \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_NCC_STYLE=OFF \
            -DENABLE_DATA=OFF \
            -DENABLE_TESTS=ON \
            -DENABLE_PYTHON=ON \
            -DENABLE_WHEEL=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DOPENVINO_EXTRA_MODULES=${{ env.OPENVINO_CONTRIB_REPO }}/modules/arm_plugin \
            -G Ninja \
            -S ${{ env.OPENVINO_REPO }} \
            -B ${{ env.BUILD_DIR }}
          echo "::endgroup::"

      - name: CMake build & install
        run: |
          echo "::group::Clean ccache stats"
          export CCACHE_DIR=${{ env.CCACHE_DIR }}
          export CCACHE_MAXSIZE=${{ env.CCACHE_MAXSIZE }}
          ccache --zero-stats --show-config
          echo "::endgroup::"

          echo "::group::Cmake build logs"
          cmake --build "$BUILD_DIR" --parallel ${{ steps.cpu-cores.outputs.count }} \
            --config ${{ env.BUILD_TYPE }} || exit 1
          echo "::endgroup::"

          echo "::group::Show ccache stats"
          ccache --show-stats
          echo "::endgroup::"

          echo "::group::CMake install"
          cmake --install "$BUILD_DIR" --strip --config Release --prefix "$INSTALL_DIR"
          cmake --install "$BUILD_DIR" --strip --config Release --prefix "$INSTALL_DIR" --component python_wheels
          cmake --install "$BUILD_DIR" --strip --config Release --prefix "$INSTALL_DIR" --component tests
          echo "::endgroup::"

      - name: Build cpp samples
        run: $SAMPLES_INSTALL_DIR/cpp/build_samples.sh -i $INSTALL_DIR -b $BUILD_DIR/cpp_samples
        env:
          CMAKE_CXX_COMPILER_LAUNCHER: ccache

      - name: Build c samples
        run: $SAMPLES_INSTALL_DIR/c/build_samples.sh -i $INSTALL_DIR -b $BUILD_DIR/c_samples
        env:
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
          CMAKE_C_COMPILER_LAUNCHER: ccache

      - name: 'Clean build dir'
        run: rm -fr $BUILD_DIR

      #
      # Python tests
      #

      - name: 'Install Python wheels'
        run: |
          python3 -m pip install openvino-dev --force-reinstall --find-links="$INSTALL_DIR/tools"

      - name: nGraph and IE Python Bindings Tests
        run: |
          python3 -m pytest -s $INSTALL_TEST_DIR/pyngraph \
            --junitxml=$INSTALL_TEST_DIR/TEST-Pyngraph.xml \
            --ignore=$INSTALL_TEST_DIR/pyngraph/tests_compatibility/test_onnx/test_zoo_models.py \
            --ignore=$INSTALL_TEST_DIR/pyngraph/tests_compatibility/test_onnx/test_ops_convpool.py \
            --ignore=$INSTALL_TEST_DIR/pyngraph/tests_compatibility/test_onnx/test_backend.py \
            --ignore=$INSTALL_TEST_DIR/pyngraph/tests_compatibility/test_onnx/test_ops_logical.py \
            --ignore=$INSTALL_TEST_DIR/pyngraph/tests_compatibility/test_onnx/test_ops_matmul.py \
            --ignore=$INSTALL_TEST_DIR/pyngraph/tests_compatibility/test_onnx/test_ops_reduction.py \
            --ignore=$INSTALL_TEST_DIR/pyngraph/tests_compatibility/test_onnx/test_ops_unary.py

      - name: Python API 2.0 Tests
        run: |
          # For python imports to import pybind_mock_frontend
          export PYTHONPATH=$INSTALL_TEST_DIR:$(INSTALL_DIR)/python/python3.10:$PYTHONPATH
          python3 -m pytest -sv $INSTALL_TEST_DIR/pyopenvino \
            --junitxml=$INSTALL_TEST_DIR/TEST-Pyngraph.xml \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_utils/test_utils.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_zoo_models.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_ops_convpool.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_backend.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_ops_logical.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_ops_matmul.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_ops_reduction.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_ops_reshape.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_ops_unary.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_onnx/test_ops_random.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_frontend/test_frontend_onnx.py \
            --ignore=$INSTALL_TEST_DIR/pyopenvino/tests/test_frontend/test_frontend_onnx_editor.py

      - name: Model Optimizer UT
        if: runner.os != 'macOS'
        run: python3 -m pytest -s $INSTALL_TEST_DIR/mo/unit_tests --junitxml=$INSTALL_TEST_DIR/TEST-ModelOptimizer.xml

      #
      # C++ tests
      #

      - name: OpenVINO Core unit tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_core_unit_tests" --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:$INSTALL_TEST_DIR/TEST-NGraphUT.xml

      - name: OpenVINO Inference functional tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_inference_functional_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-InferenceFunc.xml

      - name: OpenVINO Inference unit tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_inference_unit_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-InferenceUnit.xml

      - name: Low Precision Transformations Tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_lp_transformations_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-LpTransformations.xml

      - name: OpenVINO Conditional compilation tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_conditional_compilation_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-ConditionalCompilation.xml

      - name: IR frontend tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_ir_frontend_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-IRFrontend.xml

      - name: PaddlePaddle frontend tests
        if: runner.os != 'macOS'
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/paddle_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-PaddleTests.xml

      - name: ONNX frontend tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_onnx_frontend_tests" --gtest_print_time=1 --gtest_filter=-*onnx_model_rnn_fwd_bias_initial_h* --gtest_output=xml:$INSTALL_TEST_DIR/TEST-ONNXFrontend.xml

      - name: TensorFlow Common tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_tensorflow_common_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-TensorFlowCommonFrontend.xml

      - name: TensorFlow frontend tests
        if: runner.os != 'macOS'
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_tensorflow_frontend_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-TensorFlowFrontend.xml

      - name: TensorFlow Lite frontend tests
        if: runner.os != 'macOS'
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_tensorflow_lite_frontend_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-TensorFlowLiteFrontend.xml

      - name: Transformations Tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_transformations_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-Transformations.xml

      - name: Common test utils tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/commonUtilsTests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-commonUtilsTests.xml

      - name: ARM CPU plugin func tests
        if: runner.os == 'macOS'
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/armFuncTests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-ARMCPUFuncTests.xml

      - name: CPU plugin unit tests
        if: runner.os != 'macOS'
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_cpu_unit_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-CPUUnitTests.xml

      - name: GNA plugin unit tests
        if: runner.os != 'macOS'
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_gna_unit_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-GNAUnitTests.xml

      - name: MULTI / AUTO plugin unit tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ieMultiPluginUnitTests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-MultiAutoUnitTests.xml

      - name: Template plugin tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_template_func_tests" --gtest_print_time=1 --gtest_filter=-*smoke_TopK_With_Hardcoded_Refs* --gtest_output=xml:$INSTALL_TEST_DIR/TEST-TemplateFuncTests.xml

      - name: Inference Engine C API tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/InferenceEngineCAPITests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-InferenceEngineCAPITests.xml

      - name: OpenVINO C API tests
        run: |
          source "$INSTALL_DIR/setupvars.sh"
          "$INSTALL_TEST_DIR/ov_capi_tests" --gtest_print_time=1 --gtest_output=xml:$INSTALL_TEST_DIR/TEST-OpenVINOCAPITests.xml
