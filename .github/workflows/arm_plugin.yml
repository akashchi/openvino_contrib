name: ARM plugin
on:
  workflow_dispatch:
  pull_request:
    branches:
      - 'releases/**'
      - 'master'
    paths:
      - 'modules/arm_plugin/**'
  push:
    branches:
      - 'master'
      - 'github-actions'

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: false

jobs:
  Build:
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: ['macos-11', 'windows-latest-8-cores', 'ubuntu-20.04-16-cores']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone OpenVINO Contrib
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Clone OpenVINO
        uses: actions/checkout@v3
        with:
          repository: 'ilya-lavrenov/openvino'
          ref: windows-arm-build
          path: openvino
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup scons
        run: python3 -m pip install scons

      - name: Install cross-compiler
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y crossbuild-essential-arm64

      - name: CMake configure
        id: cmake-configure
        run: |
          echo "::group::Define cmake arguments"
          if [[ "$RUNNER_OS" == "Linux" ]] ; then
            cmake_args=("-DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/openvino/cmake/arm64.toolchain.cmake")
            cmake_args+=(-DARM_COMPUTE_SCONS_JOBS=4)
            build_jobs=12
          elif [[ "$RUNNER_OS" == "Windows" ]] ; then
            cmake_args=(-A ARM64 -DBUILD_arm_plugin=OFF)
            build_jobs=6
          elif [[ "$RUNNER_OS" == "macOS" ]] ; then
            cmake_args=(-DCMAKE_OSX_ARCHITECTURES=arm64)
            cmake_args+=(-DCMAKE_OSX_DEPLOYMENT_TARGET=11.0)
            cmake_args+=(-DARM_COMPUTE_SCONS_JOBS=4)
            build_jobs=2
          fi
          echo "build_jobs=$build_jobs" >> $GITHUB_OUTPUT

          echo "build_jobs=$build_jobs"
          echo "cmake_args=${cmake_args[@]}"
          echo "::endgroup::"

          echo "::group::CMake configure"
          cmake "${cmake_args[@]}" \
            -DENABLE_TESTS=ON \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_INTEL_MYRIAD_COMMON=OFF \
            -DOPENVINO_EXTRA_MODULES="$GITHUB_WORKSPACE/modules/arm_plugin" \
            -S "$GITHUB_WORKSPACE/openvino" \
            -B "$GITHUB_WORKSPACE/build"
          echo "::endgroup::"

      - name: CMake build
        run: cmake --build "$GITHUB_WORKSPACE/build" --parallel ${{ steps.cmake-configure.outputs.build_jobs }} --config Release
