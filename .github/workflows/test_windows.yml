name: Tests on Windows
on:
  workflow_dispatch:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CMAKE_BUILD_TYPE: 'Release'
  # CCACHE_MAXSIZE: '10G'
  CMAKE_GENERATOR: 'Ninja'
  # CMAKE_OSX_DEPLOYMENT_TARGET: '11.0'
  # CMAKE_CXX_COMPILER_LAUNCHER: ccache
  # CMAKE_C_COMPILER_LAUNCHER: ccache
  SCCACHE_GHA_ENABLED: 'true'
  OPENVINO_REPO: "${{ github.workspace }}\\openvino"
  OPENVINO_CONTRIB_REPO: "${{ github.workspace }}\\openvino_contrib_repo"
  INSTALL_DIR: "${{ github.workspace }}\\install"
  INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"
  SAMPLES_INSTALL_DIR: "${{ github.workspace }}\\install\\samples"
  LAYER_TESTS_INSTALL_DIR: "${{ github.workspace }}\\install\\tests\\layer_tests"
  BUILD_DIR: "${{ github.workspace }}\\build"
  DATA_PATH: "${{ github.workspace }}\\testdata"
  MODELS_PATH: "${{ github.workspace }}\\testdata"
  OV_TEMP: "${{ github.workspace }}\\openvino_temp"
  TOOLS_DIRECTORY: "${{ github.workspace }}\\tools"
  MSVS_VARS_PATH: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat"
  CCACHE_DIR: /sources_cache/build_cache
  OPENVINO_REFERENCE: /sources_cache/openvino.reference
  OPENVINO_CONTRIB_REFERENCE: /sources_cache/openvino_contrib.reference
  SUBMODULES_REFERENCE: /sources_cache/submodules.reference
  PYTHON_STATIC_ARGS: -m "not dynamic_library and not template_plugin"
  SETUPVARS: "${{ github.workspace }}\\install\\setupvars.bat"
  OV_CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}\openvino\cmake\toolchains\mt.runtime.win32.toolchain.cmake


jobs:
  Build:
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
    runs-on: ['windows-latest-8-cores']
    steps:
      
      # - name: Check Volumes
      #   run: |
      #     ls -la /sources_cache
      - name: Create Directories
        run: |
          mkdir ${{ env.TOOLS_DIRECTORY }}
      
      # - name: Add Reference Repository Folders as Safe
      #   run: |
      #     git config --global --add safe.directory '*'
      
      - name: Clone OpenVINO & OpenVINO Contrib
        run: |
          # cd /github && git clone --reference-if-able ${{ env.OPENVINO_REFERENCE }} --recurse-submodules https://github.com/openvinotoolkit/openvino.git
          # git clone --recurse-submodules https://github.com/akashchi/openvino.git ${{ env.OPENVINO_REPO }}

          git clone https://github.com/akashchi/openvino.git ${{ env.OPENVINO_REPO }} && cd ${{ env.OPENVINO_REPO }} && git submodule update --init --recursive

          # TODO: rm when scheduled on actual branches
          cd ${{ env.OPENVINO_REPO }} && git checkout ci/off-api-validation
          
          # cd /github && git clone --reference-if-able ${{ env.OPENVINO_CONTRIB_REFERENCE }} --recurse-submodules https://github.com/openvinotoolkit/openvino_contrib.git ${{ env.OPENVINO_CONTRIB_REPO }}
          git clone --recurse-submodules https://github.com/openvinotoolkit/openvino_contrib.git ${{ env.OPENVINO_CONTRIB_REPO }}

      - name: Clone testdata for C API tests
        run: |
          git clone https://github.com/openvinotoolkit/testdata.git ${{ env.DATA_PATH }}
          cd ${{ env.DATA_PATH }} && git lfs pull

      #
      # Dependencies
      #

      - uses: actions/setup-python@v4
        id: cp38
        with:
          python-version: '3.8'
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'
      
      - name: Get tools versions
        run: |
          # ninja --version
          # ccache --version
          python3 --version
          cmake --version

      - name: Install python dependencies
        run: |
          # For Python API
          python3 -m pip install Scons
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/wheel/requirements-dev.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/requirements.txt
          
          # For running Python API tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
          
          # For running ONNX frontend unit tests
          python3 -m pip install --force-reinstall -r ${{ env.OPENVINO_REPO }}/src/frontends/onnx/tests/requirements.txt
          
          # For running TensorFlow frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/tensorflow/tests/requirements.txt
          
          # For running Paddle frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/paddle/tests/requirements.txt

      - name: Install MO dependencies
        run: |
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_caffe.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_kaldi.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_onnx.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_dev.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_mxnet.txt
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/tools/mo/requirements_tf2.txt

      - name: Install build dependencies
        run: |
          choco install --no-progress ninja

      #
      # Build
      #

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores

      - uses: ilammy/msvc-dev-cmd@v1
      
      - name: CMake configure
        id: cmake-configure
        run: |
          echo "::group::CMake configure"
          
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake -G "Ninja Multi-Config" `
            -DENABLE_CPPLINT=OFF `
            -DENABLE_NCC_STYLE=OFF `
            -DENABLE_DATA=OFF `
            -DENABLE_TESTS=ON `
            -DENABLE_PYTHON=ON `
            -DENABLE_WHEEL=ON `
            -DENABLE_INTEL_GNA=OFF `
            -DENABLE_HETERO=OFF `
            -DENABLE_OV_PADDLE_FRONTEND=OFF `
            -DENABLE_OV_PYTORCH_FRONTEND=ON `
            -DENABLE_OV_TF_FRONTEND=ON `
            -DENABLE_OV_TF_LITE_FRONTEND=ON `
            -DENABLE_OV_ONNX_FRONTEND=OFF `
            -DBUILD_nvidia_plugin=OFF `
            -DENABLE_ONEDNN_FOR_GPU=OFF `
            -DENABLE_INTEL_GPU_DEFAULT=OFF `
            -DBUILD_SHARED_LIBS=OFF `
            -DCMAKE_BUILD_TYPE=Release `
            -DENABLE_FASTER_BUILD=ON `
            -DCMAKE_COMPILE_WARNING_AS_ERROR=OFF `
            -DENABLE_STRICT_DEPENDENCIES=OFF `
            -DCUSTOM_OPERATIONS="calculate_grid;complex_mul;fft;grid_sample;sparse_conv;sparse_conv_transpose" `
            -S ${{ env.OPENVINO_REPO }} `
            -B ${{ env.BUILD_DIR }}
          echo "::endgroup::"

      - name: CMake build & install
        run: |
          $ErrorActionPreference = "Stop"
          # echo "::group::Clean ccache stats"
          # ccache --zero-stats --show-config
          # echo "::endgroup::"

          echo "::group::Cmake build logs"
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake --build ${{ env.BUILD_DIR }} --parallel ${{ steps.cpu-cores.outputs.count }} --config Release
          echo "::endgroup::"

          # echo "::group::Show ccache stats"
          # ccache --show-stats
          # echo "::endgroup::"

          echo "::group::Layer tests install"
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake -S ${{ env.OPENVINO_REPO }}/tests/layer_tests -B ${{ env.BUILD_DIR }}/layer_tests
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake --build ${{ env.BUILD_DIR }}/layer_tests --config Release
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake --install ${{ env.BUILD_DIR }}/layer_tests --config Release --prefix ${{ env.INSTALL_DIR }} --component tests
          echo "::endgroup::"

          echo "::group::Samples tests install"
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake -S ${{ env.OPENVINO_REPO }}/tests/samples_tests -B ${{ env.BUILD_DIR }}/samples_tests
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake --build ${{ env.BUILD_DIR }}/samples_tests --config Release
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake --install ${{ env.BUILD_DIR }}/samples_tests --config Release --prefix ${{ env.INSTALL_DIR }} --component tests
          echo "::endgroup::"

          echo "::group::CMake install"
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake --install ${{ env.BUILD_DIR }} --strip --config Release --prefix ${{ env.INSTALL_DIR }}
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cmake --install ${{ env.BUILD_DIR }} --strip --config Release --prefix ${{ env.INSTALL_DIR }} --component python_wheels
          
          echo "::endgroup::"

          echo "::group::Archive Artifacts"
          
          $file=Get-ChildItem -Path "${{ env.INSTALL_DIR }}" -Exclude "tests"
          $compress = @{
            Path = $file
            CompressionLevel = "Fastest"
            DestinationPath = "${{ env.BUILD_DIR }}/openvino_package.zip"
          }
          Compress-Archive @compress

          $file=Get-ChildItem -Path "${{ env.INSTALL_DIR }}\tests"
          $compress = @{
            Path = $file
            CompressionLevel = "Fastest"
            DestinationPath = "${{ env.BUILD_DIR }}/openvino_tests.zip"
          }
          Compress-Archive @compress

          echo "::endgroup::"
      
      - name: Check Test Sources
        run: |
          echo "::group::Build Dir"
          ls ${{ env.BUILD_DIR }}
          echo "::endgroup::"
          
          echo "::group::Test Dir"
          ls ${{ env.INSTALL_TEST_DIR }}
          echo "::endgroup::"

      - name: Build cpp samples
        run: |
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64
          & ${{ env.SAMPLES_INSTALL_DIR }}/cpp/build_samples_msvc.bat -i ${{ env.BUILD_DIR }}/samples_install -b ${{ env.BUILD_DIR }}/cpp_samples

      - name: Build c samples
        run: |
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64
          & ${{ env.SAMPLES_INSTALL_DIR }}/c/build_samples_msvc.bat -i ${{ env.BUILD_DIR }}/samples_install -b ${{ env.BUILD_DIR }}/c_samples
        
      - name: Build cpp samples 2
        if: ${{ always() }}
        run: |
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64
          & "${{ env.SAMPLES_INSTALL_DIR }}/cpp/build_samples_msvc.bat" -i ${{ env.BUILD_DIR }}/samples_install -b ${{ env.BUILD_DIR }}/cpp_samples

      - name: Build c samples 2
        if: ${{ always() }}
        run: |
          & "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64
          & "${{ env.SAMPLES_INSTALL_DIR }}/c/build_samples_msvc.bat" -i ${{ env.BUILD_DIR }}/samples_install -b ${{ env.BUILD_DIR }}/c_samples

#       - name: Samples tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           python3 -m pip install -r ${{ env.INSTALL_TEST_DIR }}/smoke_tests/requirements.txt
#           export LD_LIBRARY_PATH=${{ env.IE_APP_PATH }}:$LD_LIBRARY_PATH
#           python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/smoke_tests \
#             --env_conf ${{ env.INSTALL_TEST_DIR }}/smoke_tests/env_config.yml \
#             --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-SamplesSmokeTests.xml
#         env:
#           IE_APP_PATH: ${{ env.BUILD_DIR }}/samples_install/samples_bin
#           IE_APP_PYTHON_PATH: ${{ env.INSTALL_DIR }}/samples/python
#           SHARE: ${{ env.INSTALL_TEST_DIR }}/smoke_tests/samples_smoke_tests_data
#           WORKSPACE: ${{ env.INSTALL_DIR }}

      - name: Upload openvino package
        uses: actions/upload-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.BUILD_DIR }}/openvino_package.zip

      - name: Upload openvino tests package
        uses: actions/upload-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.BUILD_DIR }}/openvino_tests.zip

      #
      # Python tests
      #

      - name: Install Python wheels
        if: ${{ always() }}
        run: |
          python3 -m pip install openvino-dev --force-reinstall --find-links=${{ env.INSTALL_DIR }}\tools

      # - name: nGraph and IE Python Bindings Tests
      #   run: |
      #     python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/pyngraph ${{ env.PYTHON_STATIC_ARGS }} `
      #       --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml `
      #       --ignore=${{ env.INSTALL_TEST_DIR }}/pyngraph/tests/test_onnx/test_zoo_models.py `
      #       --ignore=${{ env.INSTALL_TEST_DIR }}/pyngraph/tests/test_onnx/test_backend.py

      # - name: Python API 2.0 Tests
      #   run: |
      #     # For python imports to import pybind_mock_frontend
      #     $env:PYTHONPATH=${{ env.INSTALL_TEST_DIR }};$PYTHONPATH
      #     python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/pyopenvino ${{ env.PYTHON_STATIC_ARGS }} `
      #       --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml `
      #       --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_utils/test_utils.py `
      #       --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_onnx/test_zoo_models.py `
      #       --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_onnx/test_backend.py

      # - name: Model Optimizer UT
      #   if: runner.os != 'macos' # "AttributeError: module 'numpy' has no attribute 'bool'."
      #   run: |
      #     python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/mo/unit_tests \
      #         --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-ModelOptimizer.xml

      - name: PyTorch Layer Tests  # fails with "Windows fatal exception: access violation" in https://github.com/openvinotoolkit/openvino_contrib/actions/runs/4883549921/jobs/8715044265
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          $env:PYTHONPATH="${{ env.OPENVINO_REPO }}/tools/mo/;${{ env.LAYER_TESTS_INSTALL_DIR }};$env:PYTHONPATH"
          $env:PATH="C:\hostedtoolcache\windows\Python\3.8.10\x64\lib\site-packages\openvino\libs;$env:PATH"
          & "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/pytorch_tests -m precommit --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-pytorch.xmlTEST
        env:
          TEST_DEVICE: CPU

      - name: TensorFlow 1 Layer Tests - TF FE  # 1 fails with "fixture 'op_type' not found" in https://github.com/openvinotoolkit/openvino_contrib/actions/runs/4883549921/jobs/8715044265
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          # need to install TF here, otherwise TF overwrites ONNX's version of protobuf
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/tensorflow/tests/requirements.txt
          $env:PYTHONPATH="${{ env.OPENVINO_REPO }}/tools/mo/;${{ env.LAYER_TESTS_INSTALL_DIR }};$env:PYTHONPATH"
          $env:PATH="C:\hostedtoolcache\windows\Python\3.8.10\x64\lib\site-packages\openvino\libs;$env:PATH"
          & "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf_fe.xmlTEST
        env:
          TEST_DEVICE: CPU

      - name: TensorFlow 2 Layer Tests - TF FE
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          $env:PYTHONPATH="${{ env.OPENVINO_REPO }}/tools/mo/;${{ env.LAYER_TESTS_INSTALL_DIR }};$env:PYTHONPATH"
          $env:PATH="C:\hostedtoolcache\windows\Python\3.8.10\x64\lib\site-packages\openvino\libs;$env:PATH"
          & "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow2_keras_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf2_fe.xmlTEST
        env:
          TEST_DEVICE: CPU

#       - name: TensorFlow 1 Layer Tests - Legacy FE
#         run: |
#           python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
#           export PYTHONPATH=${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH
#           python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_tests/test_tf_Roll.py --ir_version=10 --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf_Roll.xmlTEST

#       - name: TensorFlow 2 Layer Tests - Legacy FE
#         run: |
#           python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
#           export PYTHONPATH=${{ env.LAYER_TESTS_INSTALL_DIR }}:$PYTHONPATH
#           python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow2_keras_tests/test_tf2_keras_activation.py \
#               --ir_version=11 --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tf2_Activation.xmlTEST -k "sigmoid"
#         env:
#           TEST_DEVICE: CPU

      - name: TensorFlow Lite Layer Tests - TFL FE
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          $env:PYTHONPATH="${{ env.LAYER_TESTS_INSTALL_DIR }};${{ env.OPENVINO_REPO }}/tools/mo/;$env:PYTHONPATH"
          $env:PATH="C:\hostedtoolcache\windows\Python\3.8.10\x64\lib\site-packages\openvino\libs;$env:PATH"
          & "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_lite_tests/ --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tfl_fe.xmlTEST
        env:
          TEST_DEVICE: CPU

      - name: MO Python API Tests # fails with "ModuleNotFoundError: No module named 'openvino.test_utils'" in https://github.com/openvinotoolkit/openvino_contrib/actions/runs/4883549921/jobs/8715044265
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          $env:PYTHONPATH="${{ env.LAYER_TESTS_INSTALL_DIR }};$env:PYTHONPATH"
          $env:PATH="C:\hostedtoolcache\windows\Python\3.8.10\x64\lib\site-packages\openvino\libs;$env:PATH"
          & "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/mo_python_api_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_mo_convert.xmlTEST
        env:
          TEST_DEVICE: CPU

      - name: Python Frontend tests
        if: ${{ always() }}
        run: |
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt
          $env:PYTHONPATH="${{ env.LAYER_TESTS_INSTALL_DIR }};$env:PYTHONPATH"
          $env:PATH="C:\hostedtoolcache\windows\Python\3.8.10\x64\lib\site-packages\openvino\libs;$env:PATH"
          & "${{ env.INSTALL_DIR }}\\setupvars.bat" && python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/py_frontend_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_py_fontend.xml

#       #
#       # C++ tests
#       #

      # - name: OpenVINO Core unit tests
      #   run: |
      #     & ${{ env.INSTALL_DIR }}/setupvars.bat
      #     ${{ env.INSTALL_TEST_DIR }}/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* \
      #           --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-NGraphUT.xml

#       - name: OpenVINO Inference functional tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_inference_functional_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceFunc.xml

#       - name: OpenVINO Inference unit tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_inference_unit_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceUnit.xml

#       - name: Low Precision Transformations Tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_lp_transformations_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-LpTransformations.xml

#       - name: OpenVINO Conditional compilation tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_conditional_compilation_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ConditionalCompilation.xml

#       - name: IR frontend tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_ir_frontend_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-IRFrontend.xml

#       # - name: PaddlePaddle frontend tests  # Disabled in Azure: https://github.com/openvinotoolkit/openvino/blob/master/.ci/azure/linux.yml#L403
#       #   run: |
#       #     source ${{ env.INSTALL_DIR }}/setupvars.sh
#       #     ${{ env.INSTALL_TEST_DIR }}/paddle_tests --gtest_print_time=1 --gtest_filter=*smoke* \
#       #           --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-PaddleTests.xml

#       - name: ONNX frontend tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ONNXFrontend.xml

#       - name: TensorFlow Common tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_common_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowCommonFrontend.xml

#       - name: TensorFlow frontend tests
#         if: runner.os != 'macOS' # Tensorflow is not installed on macos
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_frontend_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowFrontend.xml

#       - name: TensorFlow Lite frontend tests
#         if: runner.os != 'macOS' # Tensorflow is not installed on macos
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_lite_frontend_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowLiteFrontend.xml

#       - name: Transformations Tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_transformations_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-Transformations.xml

#       - name: Common test utils tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/commonUtilsTests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-commonUtilsTests.xml

#       - name: CPU plugin unit tests
#         if: runner.os != 'macOS' # not available on macOS
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_cpu_unit_tests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-CPUUnitTests.xml

#       # - name: GNA plugin unit tests  # Disabled in Azure: https://github.com/openvinotoolkit/openvino/blob/master/.ci/azure/linux.yml#L434
#       #   if: runner.os != 'macOS' 
#       #   run: |
#       #     source ${{ env.INSTALL_DIR }}/setupvars.sh
#       #     ${{ env.INSTALL_TEST_DIR }}/ov_gna_unit_tests --gtest_print_time=1 \
#       #           --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-GNAUnitTests.xml

#       - name: MULTI / AUTO plugin unit tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ieMultiPluginUnitTests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-MultiAutoUnitTests.xml

#       - name: Template plugin tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_template_func_tests --gtest_print_time=1 \
#                 --gtest_filter=*smoke* \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TemplateFuncTests.xml

#       - name: Inference Engine C API tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/InferenceEngineCAPITests --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceEngineCAPITests.xml

#       - name: OpenVINO C API tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           ${{ env.INSTALL_TEST_DIR }}/ov_capi_test --gtest_print_time=1 \
#                 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OpenVINOCAPITests.xml

#       # - name: Clean directories
#       #   if: ${{ always() }}
#       #   run: rm -fr ${{ env.OPENVINO_REPO }} ${{ env.OPENVINO_CONTRIB_REPO }} ${{ env.DATA_PATH }} ${{ env.BUILD_DIR }}

#   # CPU_ARM_Tests:
#   #   needs: Build
#   #   defaults:
#   #     run:
#   #       shell: bash
#   #   runs-on: ['self-hosted', 'linux', 'arm64']
#   #   env:
#   #     INSTALL_DIR: ${{ github.workspace }}/install
#   #     INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests

#   #   steps:
#   #     - name: Download OpenVINO package
#   #       uses: actions/download-artifact@v3
#   #       with:
#   #         name: openvino_package

#   #     - name: Download OpenVINO tests package
#   #       uses: actions/download-artifact@v3
#   #       with:
#   #         name: openvino_tests

#   #     - name: Extract OpenVINO packages
#   #       run: |
#   #         mkdir -p ${{ env.INSTALL_DIR }}
#   #         tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
#   #         tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1

#   #     - name: ARM CPU plugin func tests
#   #       if: runner.os == 'macOS'
#   #       run: |
#   #         source ${{ env.INSTALL_DIR }}/setupvars.sh
#   #         ${{ env.INSTALL_TEST_DIR }}/armFuncTests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ARMCPUFuncTests.xml

#   #     - name: Clean installation dir
#   #       if: ${{ always() }}
#   #       run: rm -fr ${{ env.INSTALL_DIR }}

#   CPU_Tests:
#     needs: Build
#     defaults:
#       run:
#         shell: bash
#     strategy:
#       fail-fast: false
#     # runs-on: ubuntu-latest
#     runs-on: ['self-hosted', 'linux', 'coverage']
#     container:
#       image: akashchi/ubuntu:latest
#     env:
#       INSTALL_DIR: /openvino/install
#       INSTALL_TEST_DIR: /openvino/install/tests

#     steps:
#       - name: Create Directories
#         run: |
#           mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }}
      
#       - name: Download OpenVINO package
#         uses: actions/download-artifact@v3
#         with:
#           name: openvino_package
#           path: ${{ env.INSTALL_DIR }}

#       - name: Download OpenVINO tests package
#         uses: actions/download-artifact@v3
#         with:
#           name: openvino_tests
#           path: ${{ env.INSTALL_TEST_DIR }}

#       - name: Extract OpenVINO packages
#         run: |
#           pushd ${{ env.INSTALL_DIR }}
#             tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
#           popd

#           pushd ${{ env.INSTALL_TEST_DIR }}
#             tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1
#           popd
      
#       - name: Intel CPU plugin func tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           # python3 ${{ env.GTEST_PARALLEL_DIR }}/gtest_parallel.py ${{ env.INSTALL_TEST_DIR }}/ov_cpu_func_tests --gtest_filter=*smoke*
#           ${{ env.INSTALL_TEST_DIR }}/ov_cpu_func_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:"${{ env.INSTALL_TEST_DIR }}/TEST-CPUFuncTests.xml"

#   GPU_Tests:
#     needs: Build

#     defaults:
#       run:
#         shell: bash
#     runs-on: ['self-hosted', 'linux', 'coverage']
#     container:
#       image: akashchi/ubuntu:latest
#       options: --device /dev/dri --device-cgroup-rule="c 189:* rmw"
#     env:
#       INSTALL_DIR: /github/install
#       INSTALL_TEST_DIR: /github/install/tests
#       GTEST_PARALLEL_DIR: /github/gtest_parallel

#     steps:
#       - name: Create Directories
#         run: |
#           mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }} ${{ env.GTEST_PARALLEL_DIR }}
      
#       - name: Download OpenVINO package
#         uses: actions/download-artifact@v3
#         with:
#           name: openvino_package
#           path: ${{ env.INSTALL_DIR }}

#       - name: Download OpenVINO tests package
#         uses: actions/download-artifact@v3
#         with:
#           name: openvino_tests
#           path: ${{ env.INSTALL_TEST_DIR }}

#       - name: Extract OpenVINO packages
#         run: |
#           pushd ${{ env.INSTALL_DIR }}
#             tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
#           popd

#           pushd ${{ env.INSTALL_TEST_DIR }}
#             tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1
#           popd
      
#       - name: Clone gtest_parallel
#         run: |
#           cd /github && git clone https://github.com/google/gtest-parallel.git ${{ env.GTEST_PARALLEL_DIR }}

#       - name: Intel GPU plugin func tests
#         run: |
#           source ${{ env.INSTALL_DIR }}/setupvars.sh
#           python3 ${{ env.GTEST_PARALLEL_DIR }}/gtest_parallel.py ${{ env.INSTALL_TEST_DIR }}/ov_gpu_func_tests --gtest_filter=*smoke*
#           # ${{ env.INSTALL_TEST_DIR }}/ov_gpu_func_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:"${{ env.INSTALL_TEST_DIR }}/TEST-GPUFuncTests.xml"
